#include "findMinimumIndex.h"
#include <algorithm>
#include <iostream>
#include <random>

constexpr int alignment = 32;
/*
 * create global data
 * a bit hacky way
 */
constexpr size_t n = 4096;
struct InitArray
{
public:
  InitArray()
  {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_real_distribution<> dis(0.1, 100.0);
    // create buffer of right size,properly aligned
    size_t const size = n * sizeof(float);
    posix_memalign((void**)&array, alignment, size);
    for (size_t i = 0; i < n; ++i) {
      // Use dis to transform the random unsigned int generated by gen into a
      // double. Each call to dis(gen) generates a new random double
      array[i] = dis(gen);
    }
  }
  ~InitArray() { free(array); }
  float* array;
};
static const InitArray initArray;

static void
findMinimumIndexC()
{
  int32_t minIndex =
    findMinimumIndex::impl<findMinimumIndex::C>(initArray.array, n);
  std::cout << "C Minimum index : " << minIndex << " with value "
            << initArray.array[minIndex] << '\n';
}

static void
findMinimumIndexSTL()
{
  int32_t minIndex =
    findMinimumIndex::impl<findMinimumIndex::STL>(initArray.array, n);
  std::cout << "STL Minimum index : " << minIndex << " with value "
            << initArray.array[minIndex] << '\n';
}

/*
 * vec find the minimum and index (impl 1)
 */
static void
findMinimumIndexVecBlend()
{
  int32_t minIndex =
    findMinimumIndex::impl<findMinimumIndex::VecBlend>(initArray.array, n);
  std::cout << "Vec Minimum index Blend : " << minIndex << " with value "
            << initArray.array[minIndex] << '\n';
}

/*
 * vec find the minimum and index (impl 2)
 */
static void
findMinimumIndexVecUnordered()
{
  int32_t minIndex =
    findMinimumIndex::impl<findMinimumIndex::VecUnordered>(initArray.array, n);
  std::cout << "Vec Minimum index Unordered : " << minIndex << " with value "
            << initArray.array[minIndex] << '\n';
}

int
main()
{
  findMinimumIndexC();
  findMinimumIndexSTL();
  findMinimumIndexVecBlend();
  findMinimumIndexVecUnordered();
  return 0;
}
