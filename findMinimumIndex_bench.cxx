#include "findMinimumIndex.h"
#include <benchmark/benchmark.h>
#include <algorithm>
#include <random>
/*
 * create global data
 * a bit hacky way
 */
constexpr size_t nstart=256;
constexpr size_t nn = 16 << 9;
float* inArray;
class InitArray
{
public:
  InitArray()
  {
    constexpr int alignment = 32;
    std::mt19937 gen;
    std::uniform_real_distribution<> dis(1.0, 10.0);
    // create buffer of right size,properly aligned
    size_t const size = nn * sizeof(float);
    posix_memalign((void**)&inArray, alignment, size);
    for (size_t i = 0; i < nn; ++i) {
      // Use dis to transform the random unsigned int generated by gen into a
      // double. Each call to dis(gen) generates a new random double
      inArray[i] = dis(gen);
    }
  }
  ~InitArray() { free(inArray); }
};
InitArray initArray;

/*
 * Test non vector code
 */

/*
 * C style 1
 */
static void
findMinimumIndexC(benchmark::State& state)
{
  for (auto _ : state) {
    const int n = state.range(0);
    int32_t minIndex = findMinIndexC(inArray, n);
    benchmark::DoNotOptimize(&minIndex);
    benchmark::ClobberMemory();
  }
}
BENCHMARK(findMinimumIndexC)->RangeMultiplier(8)->Range(nstart, nn);

/*
 * C style 2
 */
static void
findMinimumIndexC2(benchmark::State& state)
{
  for (auto _ : state) {
    const int n = state.range(0);
    int32_t minIndex = findMinIndexC2(inArray, n);
    benchmark::DoNotOptimize(&minIndex);
    benchmark::ClobberMemory();
  }
}
BENCHMARK(findMinimumIndexC2)->RangeMultiplier(8)->Range(nstart, nn);
/*
 * Use STL
 */
static void
findMinimumIndexSTL(benchmark::State& state)
{
  for (auto _ : state) {
    const int n = state.range(0);
    int32_t minIndex = findMinIndexSTL(inArray, n);
    benchmark::DoNotOptimize(&minIndex);
    benchmark::ClobberMemory();
  }
}
BENCHMARK(findMinimumIndexSTL)->RangeMultiplier(8)->Range(nstart, nn);

static void
findMinimumIndexVec(benchmark::State& state)
{
  for (auto _ : state) {
    const int n = state.range(0);
    int32_t minIndex = findMinIndexVec(inArray, n);
    benchmark::DoNotOptimize(&minIndex);
    benchmark::ClobberMemory();
  }
}

BENCHMARK(findMinimumIndexVec)->RangeMultiplier(8)->Range(nstart, nn);

static void
findMinimumIndexVec16(benchmark::State& state)
{
  for (auto _ : state) {
    const int n = state.range(0);
    int32_t minIndex = findMinIndexVec16(inArray, n);
    benchmark::DoNotOptimize(&minIndex);
    benchmark::ClobberMemory();
  }
}

BENCHMARK(findMinimumIndexVec16)->RangeMultiplier(8)->Range(nstart, nn);


BENCHMARK_MAIN();
