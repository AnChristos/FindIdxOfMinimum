#include <stdlib.h>
#include <algorithm>
#include <random>
#include <chrono>
#include <iostream>

constexpr int alignment=32;


/* Alligned Dyn Array */
template<typename T,int Alignment>
class AlignedDynArray
{
public:
  AlignedDynArray() = delete;
  AlignedDynArray(AlignedDynArray const&) = delete;
  AlignedDynArray& operator=(AlignedDynArray const&) = delete;
  AlignedDynArray(AlignedDynArray&&) = delete;
  AlignedDynArray& operator=(AlignedDynArray&&) = delete;

  explicit AlignedDynArray(size_t n);
  ~AlignedDynArray();

  ///conversions to T*
  operator T*(); 
  operator const T*() const; 

  /// index array operators  
  T& operator [](const std::size_t pos);
  const T& operator [](const std::size_t pos) const ;

  ///size of allocated buffer
  std::size_t size() const;

private:
  T*  m_buffer=nullptr;
  void* m_raw=nullptr;
  size_t const m_size=0;
}; 

template<typename T, int Alignment>
inline
AlignedDynArray<T,Alignment>::AlignedDynArray(size_t n): m_buffer(nullptr), 
  m_raw(nullptr),
  m_size(n){
    size_t const size = n * sizeof(T) +alignof(T) ;
    //create buffer of right size,properly aligned
    posix_memalign(&m_raw, Alignment, size);
    //placement new of elements to the buffer
    m_buffer = new (m_raw) T[n];
  }

template<typename T, int Alignment>
inline  
AlignedDynArray<T,Alignment>::~AlignedDynArray(){
  for (std::size_t pos = 0; pos < m_size; ++pos) {
    m_buffer[pos].~T();
  }
  free(m_buffer);
}

template<typename T, int Alignment>
inline   
AlignedDynArray<T,Alignment>::operator T*() {return m_buffer;} 

template<typename T, int Alignment>
inline   
AlignedDynArray<T,Alignment>::operator const T*() const {return m_buffer;}

template<typename T, int Alignment>
inline  
T& AlignedDynArray<T,Alignment>::operator[] (const std::size_t pos) { return m_buffer[pos];}

template<typename T, int Alignment>
inline  
const T& AlignedDynArray<T,Alignment>::operator[] (const std::size_t pos) const { return m_buffer[pos];}

template<typename T, int Alignment>
inline  
std::size_t AlignedDynArray<T,Alignment>::size() const {return m_size;}

/* Scalar code kind of C style 
 * Seem to runs the same when using gcc/clang -O2 
 */
size_t findMinimumIndex1(float* __restrict arrayIn, const size_t n){  
  float* array = (float*)__builtin_assume_aligned(arrayIn, alignment);
  float minimum = array[0]; 
  size_t minIndex=0;
  for (size_t i=0 ; i<n ; ++i){
    const float value = array[i]; 
    if(value<minimum){
      minimum=value;
      minIndex=i;
    }     
  }
  return minIndex;
} 

/* Scalar code using STL  
 * Seem to be faster than the C-style above for clang -O2
 * and slower for gcc -O2  
 */
size_t findMinimumIndex2(float* __restrict arrayIn, const size_t n){  
  float* array = (float*)__builtin_assume_aligned(arrayIn, alignment);
  return std::distance(array, std::min_element(array, array+n));
}


int main(){
  /*
   * Fill array with random numbers
   */
  //std::random_device rd;
  //std::mt19937 gen(rd()); 
  std::mt19937 gen; 
  std::uniform_real_distribution<> dis(1.0, 10.0);
  std::uniform_int_distribution<> disint(70, 80);
  const size_t n= disint(gen);
  const size_t initnn= n*(n-1)/2;
  const size_t mod=initnn%4;
  const size_t nn = initnn+mod;


  AlignedDynArray<float,alignment> array(nn);
  for (size_t i = 0; i < nn; ++i) {
    // Use dis to transform the random unsigned int generated by gen into a
    // double. Each call to dis(gen) generates a new random double
    array[i]=dis(gen);
  }

  std::cout << "Using array of size "<< array.size() <<'\n';
  std::cout<<"addr of 0 % alignment " <<reinterpret_cast<uintptr_t>(&array[0]) % alignment<< " == 0 " <<'\n';
  std::cout<<"addr of 0"  <<reinterpret_cast<uintptr_t>(&array[0]) <<'\n';
  std::cout<<"addr of 1" <<reinterpret_cast<uintptr_t>(&array[1]) <<'\n';
  std::cout<<"addr of 2" <<reinterpret_cast<uintptr_t>(&array[2]) <<'\n';
  std::cout<<"addr of 3" <<reinterpret_cast<uintptr_t>(&array[3]) <<'\n';
  {
    auto index=findMinimumIndex1(array,nn);
    std::cout<<"position is " << index <<'\n';
  }
  std::cout<<'\n';
 
  //Test all styles below 
  //1.
  { 
    //Test simple C-style solution
    std::cout << "-- findMinimumIndex1 ---" <<'\n'; 
    //Time it
    std::chrono::steady_clock::time_point clock_begin = std::chrono::steady_clock::now(); 
    auto index=findMinimumIndex1(array,nn);
    std::chrono::steady_clock::time_point clock_end = std::chrono::steady_clock::now();
    std::chrono::steady_clock::duration diff = clock_end - clock_begin;
    //print 
    std::cout <<"Time: " << std::chrono::duration <double, std::nano> (diff).count() << "ns" << '\n';
    std::cout << "Minimum index " << index <<  " with value " <<array[index]<<'\n'; 
  }
  std::cout<<'\n';
  //2.
  { 
    std::cout << "--  findMinimumIndex2  ---" <<'\n'; 
    //Time it
    std::chrono::steady_clock::time_point clock_begin = std::chrono::steady_clock::now();
    auto index=findMinimumIndex2(array,nn);
    std::chrono::steady_clock::time_point clock_end = std::chrono::steady_clock::now();
    std::chrono::steady_clock::duration diff = clock_end - clock_begin;
    //print 
    std::cout <<"Time: " << std::chrono::duration <double, std::nano> (diff).count() << "ns" << '\n';
    std::cout << "Minimum index " << index <<  " with value " <<array[index]<<'\n'; 
  }
  std::cout<<'\n';

}
