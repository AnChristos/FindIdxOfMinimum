#include "findIndexOfMinimum.h"
#include <algorithm>
#include <iostream>
#include <random>

constexpr int alignment = 32;
/*
 * create global data
 * a bit hacky way
 */
constexpr size_t n = 4096;
struct InitArray
{
public:
  InitArray()
  {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_real_distribution<> dis(0.1, 10.0);
    // create buffer of right size,properly aligned
    size_t const size = n * sizeof(float);
    posix_memalign((void**)&array, alignment, size);
    for (size_t i = 0; i < n; ++i) {
      // Use dis to transform the random unsigned int generated by gen into a
      // double. Each call to dis(gen) generates a new random double
      array[i] = dis(gen);
      //At the end
      // 36 will the 1st element of the second SIMD vec
      // 1024 will the 1st element of the first SIMD vec
      // 17 will the 2nd eleament of the fourth SIMD vec
      // 40 will the 1st eleament of the third SIMD vec
       if (i == 17 || i == 40 || i == 36 || i == 1024) {
        array[i] = 0.0;
      }
    }
  }
  ~InitArray() { free(array); }
  float* array;
};
static const InitArray initArray;

static void
findIdxMinC()
{
  int32_t minIndex =
    findIndexOfMinimum::impl<findIndexOfMinimum::C>(initArray.array, n);
  std::cout << "C Index of Minimum : " << minIndex << " with value "
            << initArray.array[minIndex] << '\n';
}

static void
findIdxMinSTL()
{
  int32_t minIndex =
    findIndexOfMinimum::impl<findIndexOfMinimum::STL>(initArray.array, n);
  std::cout << "STL Index of Minimum : " << minIndex << " with value "
            << initArray.array[minIndex] << '\n';
}

/*
 * vec find the minimum and index (impl 1)
 */
static void
findIdxMinVecAlwaysTrackIdx()
{
  int32_t minIndex =
    findIndexOfMinimum::impl<findIndexOfMinimum::VecAlwaysTrackIdx>(initArray.array, n);
  std::cout << "Vec Index of Minimum VecAlwaysTrackIdx : " << minIndex << " with value "
            << initArray.array[minIndex] << '\n';
}

/*
 * vec find the minimum and index (impl 2)
 */
static void
findIdxMinVecUpdateIdxOnNewMin()
{
  int32_t minIndex =
    findIndexOfMinimum::impl<findIndexOfMinimum::VecUpdateIdxOnNewMin>(initArray.array, n);
  std::cout << "Vec Index of Minimum VecUpdateIdxOnNewMin : " << minIndex << " with value "
            << initArray.array[minIndex] << '\n';
}

int
main()
{
  findIdxMinC();
  findIdxMinSTL();
  findIdxMinVecAlwaysTrackIdx();
  findIdxMinVecUpdateIdxOnNewMin();
  return 0;
}
